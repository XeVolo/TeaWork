@inherits LayoutComponentBase
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager navigationManager
<RadzenComponents @rendermode="InteractiveServer" />

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <Dropdown Color="DropdownColor.Secondary">
                        <DropdownToggleButton>Notifications</DropdownToggleButton>
                        <DropdownMenu>
                            <DropdownItem To="notifications" Type="DropdownItemType.Link">Notifications</DropdownItem>
                            <DropdownDivider>Dropdown header</DropdownDivider>
                            <DropdownItem To="#" Type="DropdownItemType.Link">Another action</DropdownItem>
                            <DropdownItem To="#" Type="DropdownItemType.Link">Something else here</DropdownItem>
                            <DropdownItem To="#" Type="DropdownItemType.Link">Separated link</DropdownItem>
                        </DropdownMenu>
                    </Dropdown>
                </Authorized>
                <NotAuthorized>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    List<ToastMessage> messages = new List<ToastMessage>();
    List<DropdownItem> notifications = new List<DropdownItem>();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/communicationhub"))
            .Build();

        await hubConnection.StartAsync();

        hubConnection.On<string, string>("ReceiveMessageNotification", (senderId, message) =>
        {
            ShowMessage(senderId, message);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string>("ReceiveInvationNotification", (title, description) =>
        {
            ShowMessage(title, description);
            InvokeAsync(StateHasChanged);
        });
    }

    private void ShowMessage(string title, string description) => messages.Add(CreateToastMessage(title, description));

    private ToastMessage CreateToastMessage(string title, string description)
    => new ToastMessage
        {
            Type = ToastType.Info,
            Title = title,
            HelpText = $"{DateTime.Now}",
            Message = description,
        };


}