@inherits LayoutComponentBase
@using Microsoft.AspNetCore.SignalR.Client
@using TeaWork.Logic.Services.Interfaces
@using TeaWork.Logic.Dto
@using TeaWork.Data.Models
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService UserService
@inject IProjectService ProjectService
@inject INotificationService NotificationService
@using Orientation = Radzen.Orientation;
<RadzenComponents @rendermode="InteractiveServer" />

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

        <div id="test4" class="top-row px-4">
            <AuthorizeView>
                <Authorized>                                      
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0.5rem" class="rz-p-sm-12">
                        <RadzenDropDown @bind-Value=@value Data=@myProjects TextProperty="@nameof(Project.Title)" ValueProperty="@nameof(Project.Id)" AllowClear=true Placeholder="Select project" Style="width: 100%; max-width: 400px;" Name="DropDownClear" />
                        <RadzenButton id="RadzenButton" Style="width: 200px;" Disabled="@IsDisabled" Text="To Do List" Click="NavigateToToDoList" ButtonStyle="ButtonStyle.Primary" />
                        <RadzenButton id="RadzenButton" Style="width: 200px;" Disabled="@IsDisabled" Text="Details" Click="NavigateToDetails" ButtonStyle="ButtonStyle.Primary" />
                        <RadzenButton id="RadzenButton" Style="width: 200px;" Disabled="@IsDisabled" Text="Schedule" Click="NavigateToSchedule" ButtonStyle="ButtonStyle.Primary" />
                        <RadzenButton id="RadzenButton" Style="width: 250px;" Disabled="@IsDisabled" Text="Design Concept" Click="NavigateToDesignConcept" ButtonStyle="ButtonStyle.Primary" />
                        <RadzenButton id="RadzenButton" Style="width: 150px;" Disabled="@IsDisabled" Text="Files" Click="NavigateToFiles" ButtonStyle="ButtonStyle.Primary" />
                        </RadzenStack>
                </Authorized>
                <NotAuthorized>
                </NotAuthorized>
            </AuthorizeView>
        </div>  
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    List<ToastMessage> messages = new List<ToastMessage>();
    List<DropdownItem> notifications = new List<DropdownItem>();
    private HubConnection? hubConnection;
    private string? currentUser;
    int? value;
    private bool IsDisabled => value == null;
    IEnumerable<Project> myProjects;

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {

            currentUser = await UserService.GetLoggedUserId();
            myProjects = await ProjectService.GetMyProjects();
            if (hubConnection == null)
            {
                hubConnection = new HubConnectionBuilder()
                    .WithUrl(NavigationManager.ToAbsoluteUri($"/communicationhub?userId={currentUser}"))
                    .Build();

                await hubConnection.StartAsync();


                hubConnection.On<string, string>("ReceiveMessageNotification", (senderId, message) =>
                {
                    ShowMessage(senderId, message);
                    NotificationDto newNotification = new NotificationDto
                    {
                        UserId = currentUser,
                        Title = senderId,
                        Description = message,
                        NotifiType = Data.Enums.NotificationType.Message
                    };
                    NotificationService.NewNotification(newNotification);
                    InvokeAsync(StateHasChanged);
                });

                hubConnection.On<string, string>("ReceiveInvationNotification", (title, description) =>
                {
                    ShowMessage(title, description);
                    NotificationDto newNotification = new NotificationDto
                    {
                        UserId = currentUser,
                        Title = title,
                        Description = description,
                        NotifiType = Data.Enums.NotificationType.Invitation
                    };
                    NotificationService.NewNotification(newNotification);
                    InvokeAsync(StateHasChanged);
                });

                hubConnection.On<string, string>("ReceiveDesignConceptNotification", (title, message) =>
                {
                    ShowMessage(title, message);
                    NotificationDto newNotification = new NotificationDto
                    {
                        UserId = currentUser,
                        Title = title,
                        Description = message,
                        NotifiType = Data.Enums.NotificationType.DesignConcept
                    };
                    NotificationService.NewNotification(newNotification);
                    InvokeAsync(StateHasChanged);
                });

                hubConnection.On<string, string>("ReceiveDesignConceptCommentNotification", (title, message) =>
                {
                    ShowMessage(title, message);
                    NotificationDto newNotification = new NotificationDto
                    {
                        UserId = currentUser,
                        Title = title,
                        Description = message,
                        NotifiType = Data.Enums.NotificationType.Comment
                    };
                    NotificationService.NewNotification(newNotification);
                    InvokeAsync(StateHasChanged);
                });
                hubConnection.On<string, string>("ReceiveTaskNotification", (title, message) =>
                {
                    ShowMessage(title, message);
                    NotificationDto newNotification = new NotificationDto
                    {
                        UserId = currentUser,
                        Title = title,
                        Description = message,
                        NotifiType = Data.Enums.NotificationType.Task
                    };
                    NotificationService.NewNotification(newNotification);
                    InvokeAsync(StateHasChanged);
                });
                
            }
        }
    }

    private void ShowMessage(string title, string description) => messages.Add(CreateToastMessage(title, description));

    private ToastMessage CreateToastMessage(string title, string description)
    => new ToastMessage
        {
            Type = ToastType.Info,
            Title = title,
            HelpText = $"{DateTime.Now}",
            Message = description,
        };

    private void NavigateToToDoList()
    {
        NavigationManager.NavigateTo($"projects/tasks?id={value}");
    }
    private void NavigateToSchedule()
    {
        NavigationManager.NavigateTo($"projects/schedule?id={value}");
    }
    private void NavigateToDetails()
    {
        NavigationManager.NavigateTo($"projects/details?id={value}");
    }
    private void NavigateToFiles()
    {
        NavigationManager.NavigateTo($"projects/files?id={value}");
    }
    private void NavigateToDesignConcept()
    {
        NavigationManager.NavigateTo($"projects/designconcept?id={value}");
    }
}