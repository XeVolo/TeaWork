@implements IDisposable
@using TeaWork.Logic.Services
@inject NavigationManager NavigationManager
@inject LanguageService LanguageService
@inject IJSRuntime JS

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">TeaWork</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> @Localizer["Home"]
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="messages">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> @Localizer["Messages"]
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="projects">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> @Localizer["Projects"]
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="notifications">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> @Localizer["Notifications"]
            </NavLink>
        </div>
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="privateschedule">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> @Localizer["PrivateSchedule"]
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> @Localizer["LogOut"]
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> @Localizer["Register"]
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> @Localizer["Login"]
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>

        <div class="nav-item px-3">
            <RadzenSelectBar @bind-Value=@value TValue="bool" Change="ChangeLanguage">
            <Items>
                <RadzenSelectBarItem Text="ENG" Value="true" Style="font:bold; color:white; background-color:mediumpurple"/>
                    <RadzenSelectBarItem Text="PL" Value="false" Style="font:bold; color:white; background-color:mediumpurple" />
            </Items>
        </RadzenSelectBar>
        </div>
    </nav>
</div>

@code {
    private string? currentUrl;
    bool value;
    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var name = LanguageService.GetName();
            var cookie = await JS.InvokeAsync<object>("ReadCookie.ReadCookie", name);
        }
    }
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }
    private async Task ChangeLanguage()
    {
        string culture = value ? "en" : "pl";
        var name = LanguageService.GetName();
        var value2 = LanguageService.GetValue(culture);
        await JS.InvokeAsync<object>("WriteCookie.WriteCookie", name, value2, DateTime.Now.AddYears(1));
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }    

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

