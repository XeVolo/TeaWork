@page "/projects/tasks"
@using TeaWork.Data.Models
@using TeaWork.Logic.Dto
@using TeaWork.Logic.Services.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@using TeaWork.Data.Enums
@inject NavigationManager NavigationManager
@inject IProjectService ProjectService
@inject IUserService UserService
@inject INotificationService NotificationService
@inject IDesignConceptService DesignConceptService
@inject ITaskService ProjectTaskService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@implements IAsyncDisposable

<PageTitle>Project tasks</PageTitle>
<div class="container">
<h3 class="page-title">Project Tasks</h3>
    <div class="project-details">
        <h4 class="section-title">Project</h4>
    <hr />
    @if (project is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
            <dl class="row project-info">
                <dt class="col-sm-2">@Localizer["Title"]</dt>
            <dd class="col-sm-10">@project.Title</dd>
                <dt class="col-sm-2">@Localizer["StartDate"]</dt>
            <dd class="col-sm-10">@project.StartDate</dd>
                <dt class="col-sm-2">@Localizer["Deadline"]</dt>
            <dd class="col-sm-10">@project.Deadline</dd>
                <dt class="col-sm-2">@Localizer["Description"]</dt>
            <dd class="col-sm-10">@project.Description</dd>
            </dl>

            <RadzenButton id="RadzenButton" Text="Add Project Task" Click="() => ShowModal()" Style="width: 100%;" />

        <Modal @ref="modal" Title="Add task">
            <BodyTemplate>
                    <EditForm Model="newProjectTask" OnValidSubmit="AddProjectTask" class="task-form">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="form-group">
                        <label for="title">Title:</label>
                        <InputText id="title" class="form-control" @bind-Value="newProjectTask.Title" />
                        <ValidationMessage For="() => newProjectTask.Title" class="text-danger" />
                    </div>

                    <div class="form-group">
                        <label for="description">Description:</label>
                        <InputTextArea id="description" class="form-control" @bind-Value="newProjectTask.Description" />
                        <ValidationMessage For="() => newProjectTask.Description" class="text-danger" />
                    </div>

                    <div class="form-group">
                        <label for="start">Beginning of the task:</label>
                        <RadzenDatePicker TValue="DateTime?" Value=@newProjectTask.Start Change="@(args => newProjectTask.Start = args)" Name="RadzenDatePickerChangeEvent" />
                        <ValidationMessage For="() => newProjectTask.Start" class="text-danger" />
                    </div>

                    <div class="form-group">
                        <label for="deadline">Deadline:</label>
                        <RadzenDatePicker TValue="DateTime?" Value=@newProjectTask.Deadline Change="@(args => newProjectTask.Deadline = args)" Name="RadzenDatePickerChangeEvent" />
                        <ValidationMessage For="() => newProjectTask.Deadline" class="text-danger" />
                    </div>

                    <div class="form-group">
                        <label for="state">State:</label>
                        <InputSelect id="state" class="form-control" @bind-Value="newProjectTask.State">
                            <option value="">-- Wybierz stan --</option>
                            @foreach (var state in Enum.GetValues<TaskState>())
                            {
                                <option value="@state">@state</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => newProjectTask.State" class="text-danger" />
                    </div>

                    <div class="form-group">
                        <label for="priority">Priority:</label>
                        <InputSelect id="priority" class="form-control" @bind-Value="newProjectTask.Priority">
                            <option value="">-- Wybierz priorytet --</option>
                            @foreach (var priority in Enum.GetValues<TaskPriority>())
                            {
                                <option value="@priority">@priority</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => newProjectTask.Priority" class="text-danger" />
                    </div>

                    <button type="submit" class="btn btn-success">Add</button>
                </EditForm>
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Secondary" @onclick="HideModal">Close</Button>
            </FooterTemplate>
        </Modal>



            <div class="tasks-list">
                @if (projectTasks is not null)
                {

                    @foreach (var projectTask in projectTasks)
                    {
                        <RadzenCard class="rz-my-12 rz-mx-auto">
                        <div class="task-item">
                            <dl class="row">
                                @if (projectTask.User is not null)
                                {
                                    <dt class="col-sm-2 label">User</dt>
                                    <dd class="col-sm-10 value">@projectTask.User.UserName</dd>
                                }
                                <dt class="col-sm-2 label">Title</dt>
                                <dd class="col-sm-10 value">@projectTask.Title</dd>
                                <dt class="col-sm-2 label">Description</dt>
                                <dd class="col-sm-10 value">@projectTask.Description</dd>
                                <dt class="col-sm-2 label">Creation Date</dt>
                                <dd class="col-sm-10 value">@projectTask.CreationDate</dd>
                                <dt class="col-sm-2 label">Deadline</dt>
                                <dd class="col-sm-10 value">@projectTask.Deadline</dd>
                                <dt class="col-sm-2 label">State</dt>
                                <dd class="col-sm-10 value">@projectTask.State</dd>
                                <dt class="col-sm-2 label">Priority</dt>
                                <dd class="col-sm-10 value">@projectTask.Priority</dd>

                                @if (projectTask.TasksDistributions is not null)
                                {
                                    <dt class="col-sm-2 label">Task Assignment:</dt>
                                    <dd class="col-sm-10 value">
                                        <ul class="assigned-users">
                                            @foreach (var user in projectTask.TasksDistributions)
                                            {
                                                if (user.User is not null)
                                                {
                                                    <li>@user.User.UserName</li>
                                                }
                                            }
                                        </ul>
                                    </dd>
                                }
                            </dl>

                            <div class="task-buttons">
                                <button class="btn btn-primary" @onclick="() => ShowAssignModal(projectTask.Id)">Assign a task</button>
                                <button class="btn btn-primary" @onclick="() => ShowPriorityModal(projectTask.Id)">Change priority</button>
                                <button class="btn btn-primary" @onclick="() => ShowStateModal(projectTask.Id)">Change state</button>
                            </div>
                        </div>
                        </RadzenCard>
                    }
                }
            </div>
            <Modal @ref="assignModal" Title="Assign a task">
                <BodyTemplate>
                    <EditForm Model="newUser" OnValidSubmit="@(() => AssignTask(selectedProjectTaskId))">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />                        

                        <div class="form-group">
                            <label for="priority">User:</label>
                            <InputSelect id="user" class="form-control" @bind-Value="newUser.Id">
                                <option value="">-- Assign user --</option>
                                @if (users is not null)
                                {
                                    @foreach (var user in users)
                                    {
                                        <option value="@user.Id">@user.Name</option>
                                        
                                    }
                                }
                            </InputSelect>

                            <ValidationMessage For="() => newUser.Name" class="text-danger" />
                        </div>
                        

                        <button type="submit" class="btn btn-success">Add</button>
                    </EditForm>
                </BodyTemplate>
                <FooterTemplate>
                    <Button Color="ButtonColor.Secondary" @onclick="HideAssignModal">Close</Button>
                </FooterTemplate>
            </Modal>

            <Modal @ref="priorityModal" Title="Change Priority">
                <BodyTemplate>
                    <EditForm Model="newPriority" OnValidSubmit="@(() => ChangePriorityTask(selectedProjectTaskId))">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="form-group">
                            <label for="priority">Priority:</label>
                            <InputSelect id="priority" class="form-control" @bind-Value="newPriority">
                                <option value="">-- Change priority --</option>
                                
                                    @foreach (TaskPriority priority in Enum.GetValues(typeof(TaskPriority)))
                                    {
                                        <option value="@priority">@priority</option>
                                    }
                                
                            </InputSelect>
                        </div>
                        <button type="submit" class="btn btn-success">Change</button>
                    </EditForm>
                </BodyTemplate>
                <FooterTemplate>
                    <Button Color="ButtonColor.Secondary" @onclick="HidePriorityModal">Close</Button>
                </FooterTemplate>
            </Modal>

            <Modal @ref="stateModal" Title="Change State">
                <BodyTemplate>
                    <EditForm Model="newState" OnValidSubmit="@(() => ChangeStateTask(selectedProjectTaskId))">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="form-group">
                            <label for="state">State:</label>
                            <InputSelect id="state" class="form-control" @bind-Value="newState">
                                <option value="">-- Change state --</option>

                                @foreach (TaskState state in Enum.GetValues(typeof(TaskState)))
                                {
                                    <option value="@state">@state</option>
                                }

                            </InputSelect>
                        </div>
                        <button type="submit" class="btn btn-success">Change</button>
                    </EditForm>
                </BodyTemplate>
                <FooterTemplate>
                    <Button Color="ButtonColor.Secondary" @onclick="HideStateModal">Close</Button>
                </FooterTemplate>
            </Modal>
                
            
        
    }
</div>
</div>
@code {
    private HubConnection? hubConnection;
    private Project? project;
    private List<UserDto>? users; 
    private List<ProjectTask>? projectTasks;
    private Modal modal = default!;
    private Modal assignModal = default!;
    private Modal priorityModal = default!;
    private Modal stateModal = default!;
    private ProjectTaskAddDto newProjectTask = new ProjectTaskAddDto();
    private UserDto newUser = new UserDto();
    private TaskPriority newPriority = new TaskPriority();
    private TaskState newState = new TaskState();
    private int selectedProjectTaskId;
    private string? currentUser;


    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        newProjectTask.Deadline = DateTime.Now;
        newProjectTask.Start = DateTime.Now;

        currentUser = await UserService.GetLoggedUserId();
        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri($"/communicationhub?userId={currentUser}"))
                .Build();

            await hubConnection.StartAsync();

            hubConnection.On("ReceiveTask", async () =>
                {
                    project = await ProjectService.GetProjectById(Id);
                    projectTasks = await ProjectTaskService.GetProjectTasks(Id);
                    await InvokeAsync(StateHasChanged);
                });
        }


        project = await ProjectService.GetProjectById(Id);

        if (project is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        projectTasks = await ProjectTaskService.GetProjectTasks(Id);
        users = await UserService.GetProjectUsers(Id);
    }
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            project = await ProjectService.GetProjectById(Id);
            projectTasks = await ProjectTaskService.GetProjectTasks(Id);
            users = await UserService.GetProjectUsers(Id);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERROR: {ex.Message}");
        }
    }
    public async Task AddProjectTask()
    {
        if (newProjectTask != null)
        {
            await ProjectTaskService.Add(newProjectTask, Id);
            project = await ProjectService.GetProjectById(Id);
            projectTasks = await ProjectTaskService.GetProjectTasks(Id);


            if (hubConnection is not null)
            {
                string messageContent = newProjectTask.Title;
                string messageResult = messageContent.Length > 15
                                ? messageContent.Substring(0, 15) + "..."
                                : messageContent;

                await hubConnection.SendAsync("SendGroupTask", project.ProjectConversationId.ToString());
                await hubConnection.SendAsync("SendGroupTaskNotification", project.Title, messageResult, project.ProjectConversationId.ToString());
            }


            newProjectTask = new ProjectTaskAddDto();
            await HideModal();
            await InvokeAsync(StateHasChanged);
        }
    }
    public async Task AssignTask(int projectTaskId)
    {
        if (newUser.Id != null)
        {
            await ProjectTaskService.AddTaskDistribution(projectTaskId, newUser.Id);
            project = await ProjectService.GetProjectById(Id);
            projectTasks = await ProjectTaskService.GetProjectTasks(Id);

            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("SendGroupTask", project.ProjectConversationId.ToString());
            }

            newUser = new UserDto();
            await HideAssignModal();
            await InvokeAsync(StateHasChanged);
        }
    }
    public async Task ChangePriorityTask(int projectTaskId)
    {
        
            await ProjectTaskService.ChangePriorityTask(projectTaskId, newPriority);
            project = await ProjectService.GetProjectById(Id);
            projectTasks = await ProjectTaskService.GetProjectTasks(Id);

            if (hubConnection is not null)
            {
                //await hubConnection.SendAsync("SendGroupTask", project.ProjectConversationId.ToString());
            }

            newPriority = new TaskPriority();
            await HidePriorityModal();
            await InvokeAsync(StateHasChanged);
        
    }
    public async Task ChangeStateTask(int projectTaskId)
    {

        await ProjectTaskService.ChangeStateTask(projectTaskId, newState);
        project = await ProjectService.GetProjectById(Id);
        projectTasks = await ProjectTaskService.GetProjectTasks(Id);

        if (hubConnection is not null)
        {
            //await hubConnection.SendAsync("SendGroupTask", project.ProjectConversationId.ToString());
        }

        newState = new TaskState();
        await HideStateModal();
        await InvokeAsync(StateHasChanged);

    }
    private async Task ShowModal()
    {
        await modal.ShowAsync();
    }

    private async Task HideModal()
    {
        await modal.HideAsync();
    }
    private async Task ShowAssignModal(int taskId)
    {
        selectedProjectTaskId = taskId;
        await assignModal.ShowAsync();
    }
    private async Task ShowPriorityModal(int taskId)
    {
        selectedProjectTaskId = taskId;
        await priorityModal.ShowAsync();
    }
    private async Task ShowStateModal(int taskId)
    {
        selectedProjectTaskId = taskId;
        await stateModal.ShowAsync();
    }

    private async Task HideAssignModal()
    {
        await assignModal.HideAsync();
    }
    private async Task HidePriorityModal()
    {
        await priorityModal.HideAsync();
    }
    private async Task HideStateModal()
    {
        await stateModal.HideAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
