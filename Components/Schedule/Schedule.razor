@page "/projects/schedule"
@inject DialogService DialogService
@using TeaWork.Data.Models
@using TeaWork.Logic.Dto
@using TeaWork.Logic.Services.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@using TeaWork.Data.Enums
@inject NavigationManager NavigationManager
@inject IProjectService ProjectService
@inject IUserService UserService
@inject INotificationService NotificationService
@inject IDesignConceptService DesignConceptService
@inject ITaskService ProjectTaskService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
                 TextProperty="Text" SelectedIndex="2" AppointmentRender=@OnAppointmentRender>
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
</RadzenScheduler>

@if (projectTasks is not null)
{
    <div class="task-board">
        <div class="row">

            <div class="col-md-4 task-column running-column">
                <h3 class="task-header">Running</h3>
                @foreach (var projectTask in projectTasks.Where(t => t.State == TaskState.Running))
                {
                    <RadzenCard class="task-card">
                        <dl class="task-info">
                            @if (projectTask.User is not null)
                            {
                                <dt class="task-label">User</dt>
                                <dd class="task-value">@projectTask.User.UserName</dd>
                            }
                            <dt class="task-label">Title</dt>
                            <dd class="task-value">@projectTask.Title</dd>
                            <dt class="task-label">Description</dt>
                            <dd class="task-value">@projectTask.Description</dd>
                            <dt class="task-label">Creation Date</dt>
                            <dd class="task-value">@projectTask.CreationDate</dd>
                            <dt class="task-label">Deadline</dt>
                            <dd class="task-value">@projectTask.Deadline</dd>
                            <dt class="task-label">Priority</dt>
                            <dd class="task-value">@projectTask.Priority</dd>
                            @if (projectTask.TasksDistributions is not null)
                            {
                                <dt class="task-label">Task Assignment</dt>
                                @foreach (var user in projectTask.TasksDistributions)
                                {
                                    if (user.User is not null)
                                    {
                                        <dd class="task-value">@user.User.UserName</dd>
                                    }
                                }
                            }
                            @if (projectTask.TaskComments is not null)
                            {
                                foreach (var taskComment in projectTask.TaskComments)
                                {
                                    <RadzenCard class="comment-card">
                                        <dl class="comment-info">
                                            @if (taskComment.User is not null)
                                            {
                                                <dt class="comment-label">User</dt>
                                                <dd class="comment-value">@taskComment.User.UserName</dd>
                                            }
                                            <dt class="comment-label">Description</dt>
                                            <dd class="comment-value">@taskComment.Description</dd>
                                        </dl>
                                    </RadzenCard>
                                }
                            }
                            <EditForm Model="newComment" OnValidSubmit="@(() => AddComment(projectTask.Id))">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="error-text" />

                                <div class="form-group">
                                    <label for="commentDescription">Comment Description:</label>
                                    <InputTextArea id="commentDescription" class="form-input" @bind-Value="newComment.Description" />
                                </div>

                                <button type="submit" class="btn-add-comment">Add Comment</button>
                            </EditForm>
                        </dl>
                    </RadzenCard>
                }
            </div>

            
            <div class="col-md-4 task-column in-progress-column">
                <h3 class="task-header">In Progress</h3>
                @foreach (var projectTask in projectTasks.Where(t => t.State == TaskState.InProgress))
                {
                    <RadzenCard class="task-card">
                        <dl class="task-info">
                            @if (projectTask.User is not null)
                            {
                                <dt class="task-label">User</dt>
                                <dd class="task-value">@projectTask.User.UserName</dd>
                            }
                            <dt class="task-label">Title</dt>
                            <dd class="task-value">@projectTask.Title</dd>
                            <dt class="task-label">Description</dt>
                            <dd class="task-value">@projectTask.Description</dd>
                            <dt class="task-label">Creation Date</dt>
                            <dd class="task-value">@projectTask.CreationDate</dd>
                            <dt class="task-label">Deadline</dt>
                            <dd class="task-value">@projectTask.Deadline</dd>
                            <dt class="task-label">Priority</dt>
                            <dd class="task-value">@projectTask.Priority</dd>
                            @if (projectTask.TasksDistributions is not null)
                            {
                                <dt class="task-label">Task Assignment</dt>
                                @foreach (var user in projectTask.TasksDistributions)
                                {
                                    if (user.User is not null)
                                    {
                                        <dd class="task-value">@user.User.UserName</dd>
                                    }
                                }
                            }
                            @if (projectTask.TaskComments is not null)
                            {
                                foreach (var taskComment in projectTask.TaskComments)
                                {
                                    <RadzenCard class="comment-card">
                                        <dl class="comment-info">
                                            @if (taskComment.User is not null)
                                            {
                                                <dt class="comment-label">User</dt>
                                                <dd class="comment-value">@taskComment.User.UserName</dd>
                                            }
                                            <dt class="comment-label">Description</dt>
                                            <dd class="comment-value">@taskComment.Description</dd>
                                        </dl>
                                    </RadzenCard>
                                }
                            }
                            <EditForm Model="newComment" OnValidSubmit="@(() => AddComment(projectTask.Id))">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="error-text" />

                                <div class="form-group">
                                    <label for="commentDescription">Comment Description:</label>
                                    <InputTextArea id="commentDescription" class="form-input" @bind-Value="newComment.Description" />
                                </div>

                                <button type="submit" class="btn-add-comment">Add Comment</button>
                            </EditForm>
                        </dl>
                    </RadzenCard>
                }
            </div>

            
            <div class="col-md-4 task-column finished-column">
                <h3 class="task-header">Finished</h3>
                @foreach (var projectTask in projectTasks.Where(t => t.State == TaskState.Finished))
                {
                    <RadzenCard class="task-card">
                        <dl class="task-info">
                            @if (projectTask.User is not null)
                            {
                                <dt class="task-label">User</dt>
                                <dd class="task-value">@projectTask.User.UserName</dd>
                            }
                            <dt class="task-label">Title</dt>
                            <dd class="task-value">@projectTask.Title</dd>
                            <dt class="task-label">Description</dt>
                            <dd class="task-value">@projectTask.Description</dd>
                            <dt class="task-label">Creation Date</dt>
                            <dd class="task-value">@projectTask.CreationDate</dd>
                            <dt class="task-label">Deadline</dt>
                            <dd class="task-value">@projectTask.Deadline</dd>
                            <dt class="task-label">Priority</dt>
                            <dd class="task-value">@projectTask.Priority</dd>
                            @if (projectTask.TasksDistributions is not null)
                            {
                                <dt class="task-label">Task Assignment</dt>
                                @foreach (var user in projectTask.TasksDistributions)
                                {
                                    if (user.User is not null)
                                    {
                                        <dd class="task-value">@user.User.UserName</dd>
                                    }
                                }
                            }
                            @if (projectTask.TaskComments is not null)
                            {
                                foreach (var taskComment in projectTask.TaskComments)
                                {
                                    <RadzenCard class="comment-card">
                                        <dl class="comment-info">
                                            @if (taskComment.User is not null)
                                            {
                                                <dt class="comment-label">User</dt>
                                                <dd class="comment-value">@taskComment.User.UserName</dd>
                                            }
                                            <dt class="comment-label">Description</dt>
                                            <dd class="comment-value">@taskComment.Description</dd>
                                        </dl>
                                    </RadzenCard>
                                }
                            }
                            <EditForm Model="newComment" OnValidSubmit="@(() => AddComment(projectTask.Id))">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="error-text" />

                                <div class="form-group">
                                    <label for="commentDescription">Comment Description:</label>
                                    <InputTextArea id="commentDescription" class="form-input" @bind-Value="newComment.Description" />
                                </div>

                                <button type="submit" class="btn-add-comment">Add Comment</button>
                            </EditForm>
                        </dl>
                    </RadzenCard>
                }
            </div>
        </div>
    </div>
}



@code {
    RadzenScheduler<Appointment> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    IList<Appointment> appointments = new List<Appointment>();
    private Project? project;
    private List<ProjectTask>? projectTasks;
    private DesignConceptDto newComment = new DesignConceptDto();

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {

        project = await ProjectService.GetProjectById(Id);

        if (project is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        Appointment appointmentDeadline = new Appointment { Start = project.Deadline, End = project.Deadline, Text = "Deadline" };
        appointments.Add(appointmentDeadline);

        projectTasks = await ProjectTaskService.GetProjectTasks(Id);

        foreach(var task in projectTasks)
        {
            Appointment appointment = new Appointment { Start = task.CreationDate, End = task.Deadline, Text = task.Title };
            appointments.Add(appointment);
        }
        await scheduler.Reload();
    }
    private async Task AddComment(int taskId)
    {
        await ProjectTaskService.AddComment(newComment, taskId);
        project = await ProjectService.GetProjectById(Id);
        projectTasks = await ProjectTaskService.GetProjectTasks(Id);
        newComment = new DesignConceptDto();
        await InvokeAsync(StateHasChanged);
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }

    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {

        if (args.View.Text != "Year")
        {
            Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
                appointments.Add(data);
                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler.Reload();
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {

        var copy = new Appointment
        {
            Start = args.Data.Start,
            End = args.Data.End,
            Text = args.Data.Text
        };

        var data = await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", copy } });

        if (data != null)
        {
            // Update the appointment
            args.Data.Start = data.Start;
            args.Data.End = data.End;
            args.Data.Text = data.Text;
        }

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {

        if (args.Data.Text == "Deadline")
        {
            args.Attributes["style"] = "background: red";
        }
    }

    async Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs args)
    {
        var draggedAppointment = appointments.FirstOrDefault(x => x == args.Appointment.Data);

        if (draggedAppointment != null)
        {
            draggedAppointment.Start = draggedAppointment.Start + args.TimeSpan;

            draggedAppointment.End = draggedAppointment.End + args.TimeSpan;

            await scheduler.Reload();
        }
    }
}