@page "/notifications"
@using TeaWork.Data.Models
@using TeaWork.Data.Enums
@using TeaWork.Logic.Dto
@using TeaWork.Logic.Services
@using TeaWork.Logic.Services.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.QuickGrid
@inject NavigationManager NavigationManager
@inject INotificationService NotificationService
@inject IInvitationService InvitationService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<PageTitle>Notifications</PageTitle>

<h3>MyNotification</h3>

<QuickGrid Items="Notifications">
    <PropertyColumn Property="notification => notification.Title" />
    <PropertyColumn Property="notification => notification.Description" />
    <PropertyColumn Property="notification => notification.CreationDate" />
    <PropertyColumn Property="notification => notification.NotificationType" />
    <PropertyColumn Property="notification => notification.Status" />
</QuickGrid>
<button @onclick="() => ClearNotifications()">Clear notifications</button>
<h3>Invitations</h3>

<QuickGrid Items="Invitations">
    <PropertyColumn Property="invitation => invitation.Project.Title" />
    <PropertyColumn Property="invitation => invitation.Status" />

    <TemplateColumn Context="invitation">       
                <button @onclick="() => AcceptInvitation(invitation.Id)">Akceptuj</button>
                <button @onclick="() => DeclineInvitation(invitation.Id)">Odrzuć</button>
    </TemplateColumn>
</QuickGrid>


@code {
    private List<Notification> NotificationList = new List<Notification>();
    private IQueryable<Notification>? Notifications;

    private List<Invitation> InvitationList = new List<Invitation>();
    private IQueryable<Invitation>? Invitations;

    protected async override Task OnInitializedAsync()
    {
        NotificationList = await NotificationService.GetMyNewNotifications();
        Notifications = NotificationList.AsQueryable();

        InvitationList = await InvitationService.GetNewInvitations();
        Invitations = InvitationList.AsQueryable();
    }
    private async Task ClearNotifications()
    {
        foreach(var notification in NotificationList)
        {
            await NotificationService.NotificationDisplayed(notification);
        }
        NotificationList = await NotificationService.GetMyNewNotifications();
        await InvokeAsync(StateHasChanged);
    }
    private async void AcceptInvitation(int invitationId)
    {
        await InvitationService.AcceptInvitation(invitationId);
        await InvokeAsync(StateHasChanged);
    }

    private async void DeclineInvitation(int invitationId)
    {
        await InvitationService.DeclineInvitation(invitationId);
        await InvokeAsync(StateHasChanged);
    }
}
