@page "/messages/newconversation"
@using TeaWork.Data.Models
@using TeaWork.Logic.Dto
@using TeaWork.Logic.Services
@using TeaWork.Logic.Services.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IConversationService ConversationService
@inject IUserService UserService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<PageTitle>Find User</PageTitle>

<div class="container-fluid">
    <div class="row">

        <div class="col-md-3">
            <Messages />
        </div>       
    </div>
</div>

<button @onclick="FindUser">Send</button>

<Modal @ref="modalAddUser" Title="Send Invitation">
    <BodyTemplate>
        <EditForm Model="this" OnValidSubmit="FindUser">
            <DataAnnotationsValidator />
            <ValidationSummary class="error-text" />
            <div class="form-group">
                <label for="userInput">User Email:</label>
                <InputText id="userInput" class="form-input" @bind-Value="userInput" />
            </div>
            <button type="submit" class="btn-submit">Send</button>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideAddUserModal">Close</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="modal" Title="Uwaga!">
    <BodyTemplate>
        Nie znaleziono użytkownika z podanym adresem.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideModal">Close</Button>
    </FooterTemplate>
</Modal>

@code {
    private HubConnection? hubConnection;
    private string? userInput;
    private Modal modal = default!;
    private Modal modalAddUser = default!;
    private string? currentUser;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ShowAddUserModal();
    }
    private async Task FindUser()
    {
        try
        {
            string userId;
            if (userInput != null)
            {
                userId = await UserService.FindUserByEmail(userInput);
                var loggedUserId = await UserService.GetLoggedUserId();
                if (userId != null && !userId.Equals(loggedUserId))
                {
                    var conversation = await ConversationService.AddConversation(Data.Enums.ConversationType.PrivateChat,userInput);
                    await ConversationService.AddMember(conversation, userId);
                    await ConversationService.AddMember(conversation, loggedUserId);
                    NavigationManager.NavigateTo($"/messages/conversation?id={conversation.Id}");
                }
                else
                {
                    userInput = "";
                    await ShowModal();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERROR: {ex.Message}");
        }


    }
    private async Task ShowModal()
    {
        await modal.ShowAsync();
    }

    private async Task HideModal()
    {
        await modal.HideAsync();
    }
    private async Task ShowAddUserModal()
    {
        await modalAddUser.ShowAsync();
    }

    private async Task HideAddUserModal()
    {
        await modalAddUser.HideAsync();
    }
}
