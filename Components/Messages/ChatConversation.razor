@page "/messages/conversation"
@using Microsoft.AspNetCore.SignalR.Client
@using TeaWork.Data.Models
@using TeaWork.Logic.Dto
@using System
@using TeaWork.Logic.Services
@using TeaWork.Logic.Services.Interfaces
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@inject IConversationService ConversationService
@inject IUserService UserService
@implements IAsyncDisposable
@attribute [StreamRendering]
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
   
<PageTitle>Conversation</PageTitle>

<div class="container-fluid">
    <div class="row">
        
        <div class="col-md-3">
            <Messages />
        </div>

        
        <div class="col-md-9">
            <h1>Conversation</h1>

            <div class="conversation-section">
                <h4>Conversation</h4>
                <hr />

                @if (conversation is null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <h5>Conversation ID: @conversation.Id</h5>

                    @if (messages != null)
                    {
                        <div class="message-list">
                            @foreach (var mess in messages)
                            {
                                <div class="message @(mess.Sender.Id == currentUser ? "my-message" : "other-message")">
                                    <div class="message-sender">@mess.Sender.Email</div>
                                    <div class="message-content">@mess.Content</div>
                                </div>
                            }
                        </div>
                    }

                    
                    <div class="mt-3">
                        <a href="@($"/messages")" class="btn btn-secondary">Back to List</a>
                    </div>

                    
                    <div class="mt-3">
                        <textarea class="form-control message-input" placeholder="Enter your comment" @bind="@newMessage"></textarea>
                        <button class="btn btn-primary mt-2" @onclick="@(() => Send(newMessage))">Send</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    Conversation? conversation;
    private string currentUser;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private HubConnection? hubConnection;
    private List<Message> messages = new List<Message>();
    private string? newMessage;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetLoggedUserId();
        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri($"/communicationhub?userId={currentUser}"))
                .Build();


            hubConnection.On<int>("ReceiveMessage", async (messageId) =>
                {
                    Message mess = await ConversationService.GetMessegesById(messageId);
                    if (mess != null && mess.ConversationId == Id)
                    {
                        messages.Add(mess);
                        await InvokeAsync(StateHasChanged);
                    }

                });
            await hubConnection.StartAsync();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            await Task.Delay(50);
            conversation = await ConversationService.GetConversationById(Id);
            messages = await ConversationService.GetMessegesByConversation(Id);
            if (conversation == null)
            {
                NavigationManager.NavigateTo("/messages");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERROR: {ex.Message}");
        }
    }
    private async Task Send(string mymessage)
    {       
        try
        {
            Message message = await ConversationService.NewMessage(Id, mymessage);
            string messageContent = message.Content;
            string messageResult = messageContent.Length > 15
                            ? messageContent.Substring(0, 15) + "..."
                            : messageContent;
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("SendGroupMessage",message.Id,Id.ToString());
                await hubConnection.SendAsync("SendGroupMessageNotification", message.Sender.UserName.ToString(), messageResult, Id.ToString());
            }
            newMessage = string.Empty;
        }
        catch (Exception ex)
        {            
            Console.WriteLine($"ERROR: {ex.Message}");
        }
    }
    public async ValueTask DisposeAsync()
    {
        if(hubConnection!=null)
        await hubConnection.DisposeAsync();
    }

}
