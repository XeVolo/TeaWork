@page "/projects/details"
@using TeaWork.Data.Models
@using TeaWork.Logic.Services.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@using TeaWork.Data.Enums
@using TeaWork.Logic.Dto
@inject NavigationManager NavigationManager
@inject IProjectService ProjectService
@inject IUserService UserService
@inject INotificationService NotificationService
@inject IInvitationService InvitationService
@inject IReportService ReportService
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@implements IAsyncDisposable

<PageTitle>Details</PageTitle>

<h1>@Localizer["Details"]</h1>

<div>
    <h4>@Localizer["Project"]</h4>
    <hr />
    @if (project is null)
    {
        <p><em>@Localizer["Loading"]...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">@Localizer["Title"]</dt>
            <dd class="col-sm-10">@project.Title</dd>
            <dt class="col-sm-2">@Localizer["StartDate"]</dt>
            <dd class="col-sm-10">@project.StartDate</dd>
            <dt class="col-sm-2">@Localizer["Deadline"]</dt>
            <dd class="col-sm-10">@project.Deadline</dd>
            <dt class="col-sm-2">@Localizer["Description"]</dt>
            <dd class="col-sm-10">@project.Description</dd>            

            @if(projectMembers!=null)
            {
                <h3>@Localizer["ProjectMembers"]</h3>
            @foreach(ProjectMember member in projectMembers)
            {
                <RadzenCard Style="width: 30%; margin: 5px; padding: 20px; text-align: center; background-color: #f9f9f9;">
                @if (member.User != null)
                {
                            <dt class="col-sm-2">@Localizer["User"]</dt>
                            <dd class="col-sm-10">@member.User.UserName</dd>

                            <dt class="col-sm-2">@Localizer["Role"]</dt>
                    <dd class="col-sm-10">@member.Role</dd>

                    @if (!member.Role.Equals(ProjectMemberRole.Admin))
                    {
                                <dd><RadzenButton Text="@Localizer["DeleteUser"]" Click="() => DeleteUser(member.UserId!)" Style="background-color: #8b0000; color: black; font-weight:bold;" /></dd>
                    }
                }
                </RadzenCard>
            }
            }
        </dl>
        <RadzenButton id="RadzenButton" Text="@Localizer["AddProjectMember"]" Click="() => ShowAddUserModal()" Style="width: 100%;margin:10px;" />
        <RadzenButton id="RadzenButton" Text="@Localizer["CreateRaport"]" Click="() => ShowReport()" Style="width: 100%;margin:10px;" />

        <Modal @ref="modalAddUser" Title="@Localizer["SendInvitation"]">
            <BodyTemplate>
                <EditForm Model="this" OnValidSubmit="FindUser">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="error-text" />
                    <div class="form-group">
                        <label for="userInput">@Localizer["UserEmail"]:</label>
                        <InputText id="userInput" class="form-input" @bind-Value="userInput" />
                    </div>
                    <button type="submit" class="btn-submit">@Localizer["Send"]</button>
                </EditForm>
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Secondary" @onclick="HideAddUserModal">@Localizer["Close"]</Button>
            </FooterTemplate>
        </Modal>
        <Modal @ref="modalReport" Title="@Localizer["CompleteReport"]">
            <BodyTemplate>
                <EditForm Model="reportForm" OnValidSubmit="DownloadReport">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="error-text" />
                    <div class="form-group">
                        <label for="Summary">@Localizer["Summary"]:</label>
                        <InputTextArea id="Summary" class="form-input" @bind-Value="reportForm.Summary" />
                    </div>
                    @foreach(var user in reportForm.UserForms)
                    {
                        <div class="form-group">
                            <label for="Descriprion">@(@Localizer["AssessUser"] +" "+ user.User)</label>
                            <InputTextArea id="Description" class="form-input" @bind-Value="user.Description" />
                        </div>
                    }
                    <div class="form-group">
                        <label for="AdditionalComment">@Localizer["AdditionalObservation"]:</label>
                        <InputTextArea id="AdditionalComment" class="form-input" @bind-Value="reportForm.AdditionalComment" />
                    </div>
                    <button type="submit" class="btn-submit">@Localizer["Send"]</button>
                </EditForm>
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Secondary" @onclick="HideReport">@Localizer["Close"]</Button>
            </FooterTemplate>
        </Modal>

        <Modal @ref="modalFailure" Title="@Localizer["Attention"]">
            <BodyTemplate>
                @Localizer["NoUser"]
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Secondary" @onclick="HideModal">@Localizer["Close"]</Button>
            </FooterTemplate>
        </Modal>
        <Modal @ref="modalSuccess" Title="@Localizer["Attention"]">
            <BodyTemplate>
                @Localizer["InvitationSent"]
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Secondary" @onclick="HideSuccessModal">@Localizer["Close"]</Button>
            </FooterTemplate>
        </Modal>
    }
</div>


<script>
    function saveAsFile(filename, bytesBase64) {
        const link = document.createElement('a');
        link.href = 'data:application/octet-stream;base64,' + bytesBase64;
        link.download = filename;
        link.click();
        link.remove();
    }
</script>



@code {
    private HubConnection? hubConnection;
    private Project? project;
    private List<ProjectMember>? projectMembers;
    private string? userInput;
    private Modal modalAddUser = default!;
    private Modal modalFailure = default!;
    private Modal modalSuccess = default!;
    private Modal modalReport= default!;
    private string? currentUser;
    private ReportForm? reportForm;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetLoggedUserId();
        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri($"/communicationhub?userId={currentUser}"))
                .Build();

            await hubConnection.StartAsync();
        }


        project = await ProjectService.GetProjectById(Id);
        projectMembers = project.ProjectMembers;
        reportForm = new ReportForm { UserForms = new List<UserForm>()};
        if (projectMembers != null)
        {
            foreach (var member in projectMembers)
            {
                if (member.User != null)
                {
                    reportForm.UserForms.Add(new UserForm { User = member.User.UserName });
                }
            }
        }


        if (project is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
    private async Task FindUser()
    {
        try
        {
            string userId;

            if (userInput != null)
            {
                userId = await UserService.FindUserByEmail(userInput);
                if (userId != null)
                {
                    if(await InvitationService.IsInvitationExist(userId,Id)==false)
                    {
                        await InvitationService.SendInvitation(userId, Id);
                        Notification notif = await NotificationService.NewInvitation(userId, Id);

                        if (hubConnection is not null)
                        {
                            await hubConnection.SendAsync("SendInvitationNotification", notif.Title, notif.Description, userId);
                        }
                        userInput = "";
                        await ShowSuccessModal();
                    }
                }
                else
                {
                    await ShowModal();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERROR: {ex.Message}");
        }
    }
    private async Task DeleteUser(string userId)
    {
        try
        {
            await ProjectService.DeleteUserFromProject(userId, Id);
            project = await ProjectService.GetProjectById(Id);
            projectMembers = project.ProjectMembers;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERROR: {ex.Message}");
        }
    }   
    private async Task DownloadReport()
    {
        try
        {
            var fileBytes = await ReportService.GenerateReport(reportForm,Id);
            var fileName = "RaportProjektu.pdf";
            var fileBase64 = Convert.ToBase64String(fileBytes);
            await JS.InvokeVoidAsync("saveAsFile", fileName, fileBase64);
            await HideReport();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERROR: {ex.Message}");
        }
    }
    private async Task ShowModal()
    {
        await modalFailure.ShowAsync();
    }

    private async Task HideModal()
    {
        await modalFailure.HideAsync();
    }
    private async Task ShowSuccessModal()
    {
        await modalSuccess.ShowAsync();
    }

    private async Task HideSuccessModal()
    {
        await modalSuccess.HideAsync();
    }

    private async Task ShowAddUserModal()
    {
        await modalAddUser.ShowAsync();
    }
    private async Task HideAddUserModal()
    {
        userInput = "";
        await modalAddUser.HideAsync();
    }
    private async Task ShowReport()
    {
        await modalReport.ShowAsync();
    }
    private async Task HideReport()
    {
        await modalReport.HideAsync();
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
