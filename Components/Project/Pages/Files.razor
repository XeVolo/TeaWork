@page "/projects/files"
@using TeaWork.Data.Models
@using TeaWork.Logic.Dto
@using TeaWork.Logic.Services.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IProjectService ProjectService
@inject IUserService UserService
@inject INotificationService NotificationService
@inject IDesignConceptService DesignConceptService
@inject IBlobStorageService BlobStorageService
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]


<PageTitle>Files</PageTitle>

<h4>File Upload (Azure Blob Storage)</h4>
<div class="row">
    <div class="col-sm-6">
        <label>
            <InputFile class="form-control" disabled="@fileLoading" OnChange="@OnInputFileChange" single />
        </label>
        @if (fileLoading)
        {
            <i class="fa fa-refresh"></i> <span>Loading...</span>
        }
    </div>
    <div class="col-sm-2">
        <button type="button" disabled="@fileLoading" class="btn btn-primary" @onclick="OnUploadSubmit">
            Upload File
        </button>
    </div>
</div>
@if (displayMessage.Length > 0)
{
    <div class="alert alert-success">
        <strong>Success!</strong> @displayMessage.
    </div>
}
<br />
<div class="row">
    @if (projectFiles.Count > 0)
    {
        <table class="table table-responsive table-bordered">
            <thead class="text-primary">
                <tr>
                    <th>File</th>
                    <th>Download</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var attachment in projectFiles)
                {

                    <tr>
                        <td>
                             @attachment.FileName
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => OnFileDownloadClick(attachment)">Download</button>
                        </td>
                        <td>
                            <button class="oi oi-delete" aria-hidden="true" @onclick="() => OnFileDeleteClick(attachment)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-info">
            <strong>No Files!</strong>
        </div>
    }
</div>

<script>
    function downloadFile(url, fileName) {
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        a.click();
        a.remove();
    }
</script>

@code {
    private string warninngMessage = "";
    private string displayMessage = "";
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool fileLoading;
    string Message = "No file(s) selected";
    IReadOnlyList<IBrowserFile> selectedFiles;
    private List<ProjectFile> projectFiles = new();

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        projectFiles = await BlobStorageService.GetFilesById(Id);
    }

    protected override async Task OnParametersSetAsync()
    {

        projectFiles = await BlobStorageService.GetFilesById(Id);
    }
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }
    private async void OnUploadSubmit()
    {
        fileLoading = true;
        foreach (var file in selectedFiles)
        {
            try
            {
                ProjectFile projectFile = await BlobStorageService.AddFile(file.Name, file.ContentType, Convert.ToInt32(file.Size), Id);
                bool uploaded = await BlobStorageService.UploadFileToBlobAsync(projectFile, file.OpenReadStream(20971520));
                if (uploaded)
                {                  
                    displayMessage = projectFile.FileName + " Uploaded!!";
                }
                else
                {
                    warninngMessage = "File Upload failed, Please try again!!";
                }

            }
            catch (Exception ex)
            {
                warninngMessage = "File Upload failed, Please try again!!";
            }
        }
        fileLoading = false;
        projectFiles = await BlobStorageService.GetFilesById(Id);
        await InvokeAsync(StateHasChanged);
        
    }

    private async void OnFileDeleteClick(ProjectFile attachment)
    {
        try
        {
            var deleteResponse = await BlobStorageService.DeleteFileToBlobAsync(attachment.Id.ToString());
            if (deleteResponse)
            {
                displayMessage = attachment.FileName + " Deleted!!";
                projectFiles = await BlobStorageService.GetFilesById(Id);
                await InvokeAsync(StateHasChanged);
            }

        }
        catch (Exception)
        {
            warninngMessage = "Something went wrong! Please try again.";
        }
        this.StateHasChanged();
    }

    private async Task OnFileDownloadClick(ProjectFile attachment)
    {
        try
        {
            var (fileContent, contentType) = await BlobStorageService.DownloadFileFromBlobAsync(attachment.Id.ToString());
            var base64 = Convert.ToBase64String(fileContent);
            var url = $"data:{contentType};base64,{base64}";
            await JS.InvokeVoidAsync("downloadFile", url, attachment.FileName);
        }
        catch (Exception ex)
        {
            warninngMessage = "Something went wrong! Please try again.";
        }
    }
}