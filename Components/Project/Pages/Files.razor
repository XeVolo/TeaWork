@page "/projects/files"
@using TeaWork.Data.Models
@using TeaWork.Logic.Dto
@using TeaWork.Logic.Services.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IProjectService ProjectService
@inject IUserService UserService
@inject INotificationService NotificationService
@inject IDesignConceptService DesignConceptService
@inject IBlobStorageService BlobStorageService
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]


<PageTitle>Files</PageTitle>

<h4>@Localizer["Files"]</h4>
@if(storageFilling){
<div class="row">
    <div class="col-sm-6">
        <label>
            <InputFile class="form-control" disabled="@fileLoading" OnChange="@OnInputFileChange" single />
        </label>
        @if (fileLoading)
        {
            <i class="fa fa-refresh"></i> <span>@Localizer["Loading"]...</span>
        }
    </div>
    <div class="col-sm-2">
        <RadzenButton Text="@Localizer["UploadFile"]" Disabled="@fileLoading" Click="OnUploadSubmit" Style="width: 70%" />
    </div>
    </div>
}
else
{
    <div class="row">
        <h3>@Localizer["StorageFilled"]</h3>
    </div>
}
@if (displayMessage.Length > 0)
{
    <div class="alert alert-success">
        <strong>@Localizer["Success"]!</strong> @displayMessage.
    </div>
}
<br />
<div class="row">
    @if (projectFiles.Count > 0)
    {     
        <RadzenDataList AllowVirtualization="true" Style="height:400px;"
                        AllowPaging="true" Data="@projectFiles" TItem="ProjectFile" PageSize="5" 
                        PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" >
            <Template Context="projectFile">
                <RadzenCard Variant="Variant.Outlined" class="rz-p-0" Style="width: 100%; overflow: hidden;">
                    <RadzenRow Gap="0">
                        <RadzenColumn Size="12" SizeLG="2" class="rz-p-4 product-title">
                            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">@(projectFile.FileName)</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeLG="6" class="rz-p-4">
                            <RadzenRow Gap="0">
                                <RadzenColumn Size="12" SizeMD="6" SizeLG="2">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">@Localizer["Size (KB)"]</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@(projectFile.FileSize)</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">@Localizer["User"]</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@(projectFile.User?.Email)</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="6" SizeLG="2">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">@Localizer["UploadDate"]</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@(projectFile.UploadDate)</RadzenText>
                                </RadzenColumn>                               
                            </RadzenRow>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeLG="2" class="rz-p-4">
                            <RadzenButton Text="@Localizer["Download"]" Click="() => OnFileDownloadClick(projectFile)" Style="width: 70%" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeLG="2" class="rz-p-4">
                            <RadzenButton Text="@Localizer["Delete"]" Click="() =>  OnFileDeleteClick(projectFile)" Style="width: 70%" />
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            </Template>
        </RadzenDataList>
    }
    else
    {
        <div class="alert alert-info">
            <strong>@Localizer["NoFiles"]!</strong>
        </div>
    }
</div>

<script>
    function downloadFile(url, fileName) {
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        a.click();
        a.remove();
    }
</script>

@code {
    private string warninngMessage = "";
    private string displayMessage = "";
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool fileLoading;
    private bool storageFilling;
    string Message = "No file(s) selected";
    IReadOnlyList<IBrowserFile> selectedFiles;
    private List<ProjectFile> projectFiles = new();

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (await ProjectService.CheckUserAccess(Id))
        {
            storageFilling = await BlobStorageService.CheckFilling(Id);
            projectFiles = await BlobStorageService.GetFilesById(Id);
        }
        else
        {
            NavigationManager.NavigateTo("projects");
        }      
    }

    protected override async Task OnParametersSetAsync()
    {
        if (await ProjectService.CheckUserAccess(Id))
        {
            projectFiles = await BlobStorageService.GetFilesById(Id);
        }
        else
        {
            NavigationManager.NavigateTo("projects");
        }
    }
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }
    private async void OnUploadSubmit()
    {
        fileLoading = true;
        if (selectedFiles != null)
        {
            foreach (var file in selectedFiles)
            {
                try
                {
                    ProjectFile projectFile = await BlobStorageService.AddFile(file.Name, file.ContentType, Convert.ToInt32(file.Size), Id);
                    bool uploaded = await BlobStorageService.UploadFileToBlobAsync(projectFile, file.OpenReadStream(20971520));
                    if (uploaded)
                    {
                        displayMessage = projectFile.FileName + " Uploaded!!";
                    }
                    else
                    {
                        warninngMessage = "File Upload failed, Please try again!!";
                    }

                }
                catch (Exception ex)
                {
                    warninngMessage = "File Upload failed, Please try again!!";
                }
            }
        }
        fileLoading = false;
        projectFiles = await BlobStorageService.GetFilesById(Id);
        await InvokeAsync(StateHasChanged);
        
    }

    private async void OnFileDeleteClick(ProjectFile attachment)
    {
        try
        {
            var deleteResponse = await BlobStorageService.DeleteFileToBlobAsync(attachment.Id.ToString());
            if (deleteResponse)
            {
                displayMessage = attachment.FileName + " Deleted!!";
                projectFiles = await BlobStorageService.GetFilesById(Id);
                await InvokeAsync(StateHasChanged);
            }

        }
        catch (Exception)
        {
            warninngMessage = "Something went wrong! Please try again.";
        }
        this.StateHasChanged();
    }

    private async Task OnFileDownloadClick(ProjectFile attachment)
    {
        try
        {
            var (fileContent, contentType) = await BlobStorageService.DownloadFileFromBlobAsync(attachment.Id.ToString());
            var base64 = Convert.ToBase64String(fileContent);
            var url = $"data:{contentType};base64,{base64}";
            await JS.InvokeVoidAsync("downloadFile", url, attachment.FileName);
        }
        catch (Exception ex)
        {
            warninngMessage = "Something went wrong! Please try again.";
        }
    }
}