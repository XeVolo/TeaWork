@page "/projects/designconcept"
@using TeaWork.Data.Models
@using TeaWork.Logic.Dto
@using TeaWork.Logic.Services.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IProjectService ProjectService
@inject IUserService UserService
@inject INotificationService NotificationService
@inject IDesignConceptService DesignConceptService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@implements IAsyncDisposable

<div class="project-page">
    <PageTitle>Project Design Concept</PageTitle>

    <h3 class="section-title">Design Concept</h3>
    <div class="project-details">
        <h4>Project</h4>
        <hr />
        @if (project is null)
        {
            <p class="loading-text"><em>Loading...</em></p>
        }
        else
        {
            <dl class="project-info">
                <dt class="info-label">Title</dt>
                <dd class="info-value">@project.Title</dd>
                <dt class="info-label">Start Date</dt>
                <dd class="info-value">@project.StartDate</dd>
                <dt class="info-label">Deadline</dt>
                <dd class="info-value">@project.Deadline</dd>
                <dt class="info-label">Description</dt>
                <dd class="info-value">@project.Description</dd>
            </dl>
            <div class="navigation-links">
                <a href="@($"/projects/edit?id={project.Id}")">Edit</a> |
                <a href="@($"/projects")">Back to List</a>
            </div>

            <button class="btn-add-concept" @onclick="ShowModal">Add Design Concept</button>

            <Modal @ref="modal" Title="Add Design Concept">
                <BodyTemplate>
                    <EditForm Model="ownDesignConcept" OnValidSubmit="AddDesignConcept">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="error-text" />

                        <div class="form-group">
                            <label for="title">Title:</label>
                            <InputText id="title" class="form-input" @bind-Value="ownDesignConcept.Title" />
                            <ValidationMessage For="() => ownDesignConcept.Title" class="error-text" />
                        </div>

                        <div class="form-group">
                            <label for="description">Description:</label>
                            <InputText id="description" class="form-input" @bind-Value="ownDesignConcept.Description" />
                            <ValidationMessage For="() => ownDesignConcept.Description" class="error-text" />
                        </div>

                        <button type="submit" class="btn-submit">Add</button>
                    </EditForm>
                </BodyTemplate>
                <FooterTemplate>
                    <Button Color="ButtonColor.Secondary" @onclick="HideModal">Close</Button>
                </FooterTemplate>
            </Modal>

            <div class="design-concepts">
                @if (designConcepts is not null)
                {
                    @foreach (var designconcept in designConcepts)
                    {
                        <RadzenCard class="concept-card">
                            <dl class="concept-info">
                                @if (designconcept.User is not null)
                                {
                                    <dt class="info-label">User</dt>
                                    <dd class="info-value">@designconcept.User.UserName</dd>
                                }
                                <dt class="info-label">Title</dt>
                                <dd class="info-value">@designconcept.Title</dd>
                                <dt class="info-label">Description</dt>
                                <dd class="info-value">@designconcept.Description</dd>
                            </dl>

                            @if (designconcept.DesignConceptComments is not null)
                            {
                                foreach (var designconceptcomment in designconcept.DesignConceptComments)
                                {
                                    <RadzenCard class="comment-card">
                                        <dl class="comment-info">
                                            @if (designconceptcomment.User is not null)
                                            {
                                                <dt class="info-label">User</dt>
                                                <dd class="info-value">@designconceptcomment.User.UserName</dd>
                                            }
                                            <dt class="info-label">Description</dt>
                                            <dd class="info-value">@designconceptcomment.Description</dd>
                                        </dl>
                                    </RadzenCard>
                                }
                            }
                            <EditForm Model="newComment" OnValidSubmit="@(() => AddComment(designconcept.Id))">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="error-text" />

                                <div class="form-group">
                                    <label for="commentDescription">Comment Description:</label>
                                    <InputTextArea id="commentDescription" class="form-input" @bind-Value="newComment.Description" />
                                </div>

                                <button type="submit" class="btn-add-comment">Add Comment</button>
                            </EditForm>
                        </RadzenCard>
                    }
                }
            </div>
        }
    </div>
</div>


@code {
    private HubConnection? hubConnection;
    private Project? project;
    private List<OwnDesignConcept>? designConcepts;
    private string? userInput;
    private Modal modal = default!;
    private bool showForm = false; 
    private DesignConceptDto ownDesignConcept = new DesignConceptDto();
    private DesignConceptDto newComment = new DesignConceptDto();
    private string? currentUser;


    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetLoggedUserId();
        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri($"/communicationhub?userId={currentUser}"))
                .Build();


            hubConnection.On("ReceiveDesignConcept",async () =>
                {
                    project = await ProjectService.GetProjectById(Id);
                    designConcepts = await DesignConceptService.GetDesignConcepts(Id);
                    await InvokeAsync(StateHasChanged);
                });


            await hubConnection.StartAsync();
        }


        project = await ProjectService.GetProjectById(Id);
        designConcepts = await DesignConceptService.GetDesignConcepts(Id);


        if (project is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
    private void ToggleFormVisibility()
    {
        showForm = !showForm;
    }
    public async Task AddDesignConcept()
    {
        await DesignConceptService.Add(ownDesignConcept, Id);
        project = await ProjectService.GetProjectById(Id);
        designConcepts = await DesignConceptService.GetDesignConcepts(Id);        

        if (hubConnection is not null)
        {
            string messageContent = ownDesignConcept.Title;
            string messageResult = messageContent.Length > 15
                            ? messageContent.Substring(0, 15) + "..."
                            : messageContent;

            await hubConnection.SendAsync("SendGroupDesignConcept", project.ProjectConversationId.ToString());
            await hubConnection.SendAsync("SendGroupDesignConceptNotification", project.Title, messageResult, project.ProjectConversationId.ToString());
        }

        ownDesignConcept = new DesignConceptDto();
        showForm = false;
        await HideModal();
        await InvokeAsync(StateHasChanged);
    }
    private async Task AddComment(int designConceptId)
    {
        await DesignConceptService.AddComment(newComment, designConceptId);
        project = await ProjectService.GetProjectById(Id);
        designConcepts = await DesignConceptService.GetDesignConcepts(Id);

        if (hubConnection is not null)
        {
            string messageContent = newComment.Description;
            string messageResult = messageContent.Length > 15
                            ? messageContent.Substring(0, 15) + "..."
                            : messageContent;

            await hubConnection.SendAsync("SendGroupDesignConcept", project.ProjectConversationId.ToString());
            await hubConnection.SendAsync("SendGroupDesignConceptCommentNotification", project.Title, messageResult, project.ProjectConversationId.ToString());
        }

        newComment = new DesignConceptDto();
        await InvokeAsync(StateHasChanged);
    }
    private async Task ShowModal()
    {
        await modal.ShowAsync();
    }

    private async Task HideModal()
    {
        await modal.HideAsync();
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
